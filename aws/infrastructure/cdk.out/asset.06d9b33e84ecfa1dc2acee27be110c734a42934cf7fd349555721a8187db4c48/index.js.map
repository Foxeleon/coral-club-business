{
  "version": 3,
  "sources": ["../../../lambda/email-handler/index.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandlerV2, APIGatewayProxyResultV2 } from 'aws-lambda';\r\nimport { SESv2Client, SendEmailCommand } from '@aws-sdk/client-sesv2';\r\n\r\nconst ses = new SESv2Client({ region: 'eu-central-1' });\r\n\r\ninterface ContactForm {\r\n    name?: string;\r\n    email: string;\r\n    message: string;\r\n}\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event): Promise<APIGatewayProxyResultV2> => {\r\n    const headers = {\r\n        'Access-Control-Allow-Origin': 'http://angular.coralworld.eu',\r\n        'Access-Control-Allow-Methods': 'POST,OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n    };\r\n\r\n    // CORS preflight\r\n    if (event.requestContext.http.method === 'OPTIONS') {\r\n        return { statusCode: 200, headers };\r\n    }\r\n\r\n    try {\r\n        const body: ContactForm = JSON.parse(event.body || '{}');\r\n\r\n        if (!body.email || !body.message) {\r\n            return {\r\n                statusCode: 422,\r\n                headers,\r\n                body: JSON.stringify({ error: 'Email and message are required' })\r\n            };\r\n        }\r\n\r\n        await ses.send(new SendEmailCommand({\r\n            FromEmailAddress: 'noreply@angular.coralworld.eu',\r\n            Destination: { ToAddresses: ['andreywirz@gmail.com'] },\r\n            Content: {\r\n                Simple: {\r\n                    Subject: {\r\n                        Data: `Contact from ${body.name || 'visitor'}`\r\n                    },\r\n                    Body: {\r\n                        Text: {\r\n                            Data: `Reply-To: ${body.email}\\n\\nMessage:\\n${body.message}`\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        return {\r\n            statusCode: 200,\r\n            headers,\r\n            body: JSON.stringify({ message: 'Email sent successfully' })\r\n        };\r\n\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return {\r\n            statusCode: 500,\r\n            headers,\r\n            body: JSON.stringify({ error: 'Internal server error' })\r\n        };\r\n    }\r\n};"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAA8C,iCAExCC,EAAM,IAAI,cAAY,CAAE,OAAQ,cAAe,CAAC,EAQzCH,EAAoC,MAAOI,GAA4C,CAChG,IAAMC,EAAU,CACZ,8BAA+B,+BAC/B,+BAAgC,eAChC,+BAAgC,cACpC,EAGA,GAAID,EAAM,eAAe,KAAK,SAAW,UACrC,MAAO,CAAE,WAAY,IAAK,QAAAC,CAAQ,EAGtC,GAAI,CACA,IAAMC,EAAoB,KAAK,MAAMF,EAAM,MAAQ,IAAI,EAEvD,MAAI,CAACE,EAAK,OAAS,CAACA,EAAK,QACd,CACH,WAAY,IACZ,QAAAD,EACA,KAAM,KAAK,UAAU,CAAE,MAAO,gCAAiC,CAAC,CACpE,GAGJ,MAAMF,EAAI,KAAK,IAAI,mBAAiB,CAChC,iBAAkB,gCAClB,YAAa,CAAE,YAAa,CAAC,sBAAsB,CAAE,EACrD,QAAS,CACL,OAAQ,CACJ,QAAS,CACL,KAAM,gBAAgBG,EAAK,MAAQ,SAAS,EAChD,EACA,KAAM,CACF,KAAM,CACF,KAAM,aAAaA,EAAK,KAAK;AAAA;AAAA;AAAA,EAAiBA,EAAK,OAAO,EAC9D,CACJ,CACJ,CACJ,CACJ,CAAC,CAAC,EAEK,CACH,WAAY,IACZ,QAAAD,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,yBAA0B,CAAC,CAC/D,EAEJ,OAASE,EAAO,CACZ,eAAQ,MAAM,SAAUA,CAAK,EACtB,CACH,WAAY,IACZ,QAAAF,EACA,KAAM,KAAK,UAAU,CAAE,MAAO,uBAAwB,CAAC,CAC3D,CACJ,CACJ",
  "names": ["index_exports", "__export", "handler", "__toCommonJS", "import_client_sesv2", "ses", "event", "headers", "body", "error"]
}
