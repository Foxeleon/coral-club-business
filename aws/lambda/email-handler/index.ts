import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';
import { SES } from 'aws-sdk';

const ses = new SES({ region: 'eu-central-1' });

export const handler = async (
    event: APIGatewayProxyEvent
): Promise<APIGatewayProxyResult> => {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*', // TODO –î–ª—è –ø—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å –º–æ–π –¥–æ–º–µ–Ω
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
    };

    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }

    try {
        if (!event.body) {
            return { statusCode: 400, headers, body: JSON.stringify({ message: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }) };
        }

        console.log('Raw event body:', event.body);
        console.log('Is Base64 Encoded:', event.isBase64Encoded);

        const requestBody = event.isBase64Encoded
            ? Buffer.from(event.body, 'base64').toString('utf-8')
            : event.body;

        console.log('Processed request body:', requestBody);

        const parsedData = JSON.parse(requestBody);

        console.log('Parsed data:', parsedData);

        const { name, email, message, phone } = parsedData;

        if (!name || !email || !message) {
            return { statusCode: 400, headers, body: JSON.stringify({ message: '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, email, message' }) };
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø–∏—Å—å–º–∞. –î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ.
        const htmlBody = `<!DOCTYPE html>
        <html lang="">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                <title>Coral Club Contact</title>
            </head>
            <body style="font-family: Arial, sans-serif; line-height: 1.6;">
                <h2 style="color: #2c5aa0;">üåä –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Coral Club</h2>
                <table style="width: 100%; max-width: 600px;">
                    <tr><td style="width: 100px;"><strong>üë§ –ò–º—è:</strong></td><td>${name}</td></tr>
                    <tr><td><strong>üìß Email:</strong></td><td>${email}</td></tr>
                    ${phone ? `<tr><td><strong>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</strong></td><td>${phone}</td></tr>` : ''}
                    <tr><td colspan="2"><hr></td></tr>
                    <tr><td colspan="2"><strong>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</strong></td></tr>
                    <tr><td colspan="2" style="padding: 15px; background: #f9f9f9; border-radius: 5px;">${message}</td></tr>
                </table>
                <hr>
                <p style="font-size: 12px; color: #666; margin-top: 20px;">
                    <em>üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Berlin' })}</em>
                </p>
            </body>
        </html>`;

        const textBody = `üåä –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Coral Club\n\nüë§ –ò–º—è: ${name}\nüìß Email: ${email}\n${phone ? `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` : ''}üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n\nüìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Berlin' })}`;

        const params = {
            Source: 'info.coralworld@gmail.com',
            Destination: { ToAddresses: ['info.coralworld@gmail.com'] },
            Message: {
                Subject: { Data: `üåä Coral Club: –∑–∞—è–≤–∫–∞ –æ—Ç ${name}`, Charset: 'UTF-8' },
                Body: {
                    Html: { Data: htmlBody, Charset: 'UTF-8' },
                    Text: { Data: textBody, Charset: 'UTF-8' }
                },
            },
            ReplyToAddresses: [email],
        };

        await ses.sendEmail(params).promise();

        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ message: 'Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' })
        };

    } catch (error) {
        console.error('=== LAMBDA ERROR ===', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.',
                error: error instanceof Error ? { name: error.name, message: error.message } : String(error)
            })
        };
    }
};